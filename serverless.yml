service: serverless-practice

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  region: ${env:AWS_REGION, 'eu-central-1'}
  versionFunctions: false
  memorySize: 128 #default to minimum, overwrite in functions, if necessary
  # role: ${env:AWS_LAMBDA_ROLE, 'arn:aws:iam::615663043961:role/lambda'}
  deploymentPrefix: ${self:service}
  tags:
    ENVIRONMENT: ${self:provider.stage}

package:
  individually: true
  exclude:
    - "**/*"

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-offline

custom:
  api:
    rootPath: 'api'
  webpack:
      includeModules:
        forceExclude:
          - aws-sdk

  staging:
    env:
      # credential env vars: ELK_API_PASSWORD, DB_PASSWORD, AWS_S3_SECRET, AWS_S3_KEY, MANDRILL_SECRET_KEY
      # share
      DB_HOST: ${env:DB_HOST, 'mysql.tuanquynet.click'}
      DB_DATABASE: ${env:DB_DATABASE, 'serverless-practice'}
      DB_USER: ${env:DB_USER, 'demo'}
      DB_PASSWORD: ${env:DB_PASSWORD, ''}
      # there is problem if we define string with @ ex: my@password
      TZ: ${env:TZ, 'UTC'}
      MEDIA_TTL: '15'
      INPUT_IMAGE_BUCKET: '${self:service}.files.rnd.upload'
      OUTPUT_IMAGE_BUCKET: '${self:service}.files.rnd.publish'
      AVATAR_IMAGE_FILE: 'avatar.jpg'

    events:
      VERIFICATION_EMAIL_SNS: arn:aws:sns:eu-central-1:407440905605:staging-gp-email-verification
      VERIFICATION_SMS_SNS: arn:aws:sns:eu-central-1:407440905605:gp-phonenumber-verification-sms

    vpc:
      securityGroupIds: []
      subnetIds: []

    enabled: false
  prod:
    env:
      # share
      DB_HOST: ${env:DB_HOST, 'mysql.production.com'}
      DB_DATABASE: ${env:DB_DATABASE, 'serverless-practice'}
      DB_USER: ${env:DB_USER, 'demo'}
      DB_PASSWORD: ${env:DB_PASSWORD, 'share123!'}
      TZ: ${env:TZ, 'Europe/Paris'}
      MEDIA_TTL: '15'
      INPUT_IMAGE_BUCKET: '${self:service}.files.rnd.upload'
      OUTPUT_IMAGE_BUCKET: '${self:service}.files.rnd.publish'
      AVATAR_IMAGE_FILE: 'avatar.jpg'

    events:
      VERIFICATION_EMAIL_SNS: arn:aws:sns:eu-central-1:407440905605:gp-email-verification
      VERIFICATION_SMS_SNS: arn:aws:sns:eu-central-1:407440905605:gp-phonenumber-verification-sms

    vpc:
      securityGroupIds:
        - sg-027189d79d11f090b
      subnetIds:
        # these subnets must be pre-created
        - subnet-6168ba06
        - subnet-cac80883

    enabled: true

functions:
  hello-world:
    handler: hello-world/index.handler
    description: 'hello world'
    timeout: 10
    package:
      include:
        - hello-world/**
    events:
      - http:
          path: ${self:custom.api.rootPath}/hello-world
          method: get
          cors: true
    vpc: ${self:custom.${self:provider.stage}.vpc}

  server-info:
    handler: server-info/index.handler
    description: 'return server date time'
    timeout: 10
    package:
      include:
        - server-info/**
    vpc: ${self:custom.${self:provider.stage}.vpc}

  myfunc:
    handler: myfunc/index.handler
    description: 'test policy: cloudwatch, s3, sns, rds'
    timeout: 10
    package:
      include:
        - myfunc/**
    events:
      - schedule:
          name: myfunc-scheduler-v2--${self:service}-${opt:stage, self:provider.stage}
          description: a scheduler
          rate: rate(10 minutes)
          enabled: false
    vpc: ${self:custom.${self:provider.stage}.vpc}
    environment:
      DB_HOST: ${self:custom.${self:provider.stage}.env.DB_HOST}
      DB_DATABASE: ${self:custom.${self:provider.stage}.env.DB_DATABASE}
      DB_USER: ${self:custom.${self:provider.stage}.env.DB_USER}
      DB_PASSWORD: ${self:custom.${self:provider.stage}.env.DB_PASSWORD}
      TZ: ${self:custom.${self:provider.stage}.env.TZ}
      MEDIA_TTL: ${self:custom.${self:provider.stage}.env.MEDIA_TTL}
      LAMBDA_TEST_SERVER_TIME_ARN: '${self:service}-${opt:stage, self:provider.stage}-server-info'

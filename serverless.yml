service: serverless-practice

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  region: ${env:AWS_REGION, 'eu-central-1'}
  versionFunctions: false
  memorySize: 128 #default to minimum, overwrite in functions, if necessary
  # role: ${env:AWS_LAMBDA_ROLE, 'arn:aws:iam::615663043961:role/lambda'}
  deploymentPrefix: ${self:service}
  iamRoleStatements:
    - ${file(./assets/policy-statements/mandatory.yml)}
    - ${file(./assets/policy-statements/lambda.yml)}
  tags:
    ENVIRONMENT: ${self:provider.stage}

package:
  individually: true
  exclude:
    - "**/*"

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-offline
  - serverless-plugin-warmup
  - serverless-mocha-plugin

custom:
  api:
    rootPath: 'api'
  webpack:
      includeModules:
        forceExclude:
          - aws-sdk
          - sharp

  warmup:
    events:
      - schedule: 'rate(10 minutes)'
    memorySize: 128
    prewarm: true
  staging:
    env:
      # credential env vars: ELK_API_PASSWORD, DB_PASSWORD, AWS_S3_SECRET, AWS_S3_KEY, MANDRILL_SECRET_KEY
      # share
      DB_HOST: ${env:DB_HOST, 'mysql.tuanquynet.click'}
      DB_DATABASE: ${env:DB_DATABASE, 'serverless-practice'}
      DB_USER: ${env:DB_USER, 'demo'}
      DB_PASSWORD: ${env:DB_PASSWORD, ''}
      # there is problem if we define string with @ ex: my@password
      TZ: ${env:TZ, 'UTC'}
      MEDIA_TTL: '15'
      INPUT_IMAGE_BUCKET: '${self:service}.files.rnd.upload'
      OUTPUT_IMAGE_BUCKET: '${self:service}.files.rnd.publish'
      AVATAR_IMAGE_FILE: 'avatar.jpg'

    events:
      VERIFICATION_EMAIL_SNS: arn:aws:sns:eu-central-1:407440905605:staging-gp-email-verification
      VERIFICATION_SMS_SNS: arn:aws:sns:eu-central-1:407440905605:gp-phonenumber-verification-sms

    vpc:
      securityGroupIds: []
      subnetIds: []

    enabled: false
  prod:
    env:
      # share
      DB_HOST: ${env:DB_HOST, 'mysql.production.com'}
      DB_DATABASE: ${env:DB_DATABASE, 'serverless-practice'}
      DB_USER: ${env:DB_USER, 'demo'}
      DB_PASSWORD: ${env:DB_PASSWORD, 'share123!'}
      TZ: ${env:TZ, 'Europe/Paris'}
      MEDIA_TTL: '15'
      INPUT_IMAGE_BUCKET: '${self:service}.files.rnd.upload'
      OUTPUT_IMAGE_BUCKET: '${self:service}.files.rnd.publish'
      AVATAR_IMAGE_FILE: 'avatar.jpg'

    events:
      VERIFICATION_EMAIL_SNS: arn:aws:sns:eu-central-1:407440905605:gp-email-verification
      VERIFICATION_SMS_SNS: arn:aws:sns:eu-central-1:407440905605:gp-phonenumber-verification-sms

    vpc:
      securityGroupIds:
        - sg-027189d79d11f090b
      subnetIds:
        # these subnets must be pre-created
        - subnet-6168ba06
        - subnet-cac80883

    enabled: true

functions:
  hello-world:
    handler: hello-world/index.handler
    description: 'hello world'
    timeout: 10
    package:
      include:
        - hello-world/**
    events:
      - http:
          path: ${self:custom.api.rootPath}/hello-world
          method: get
          cors: true
    vpc: ${self:custom.${self:provider.stage}.vpc}

  server-info:
    handler: server-info/index.handler
    description: 'return server date time'
    timeout: 10
    package:
      include:
        - server-info/**
    vpc: ${self:custom.${self:provider.stage}.vpc}

  face-processor:
    handler: face-processor/index.handler
    description: 'extract, blur face'
    timeout: 180
    memorySize: 256
    role: 'SPFaceProcessorRole'
    layers:
      - {Ref: LibsLambdaLayer}
    events:
      - s3:
          bucket: ${self:custom.${self:provider.stage}.env.INPUT_IMAGE_BUCKET}
          event: s3:ObjectCreated:*
    package:
      include:
        - face-processor/**
    vpc: ${self:custom.${self:provider.stage}.vpc}
    environment:
      INPUT_IMAGE_BUCKET: ${self:custom.${self:provider.stage}.env.INPUT_IMAGE_BUCKET}
      OUTPUT_IMAGE_BUCKET: ${self:custom.${self:provider.stage}.env.OUTPUT_IMAGE_BUCKET}
      AVATAR_IMAGE_FILE: ${self:custom.${self:provider.stage}.env.AVATAR_IMAGE_FILE}

  myfunc:
    handler: myfunc/index.handler
    description: 'test policy: cloudwatch, s3, sns, rds'
    timeout: 10
    role: 'SPCustomRole'
    package:
      include:
        - myfunc/**
    events:
      - schedule:
          name: myfunc-scheduler-v2-${opt:stage, self:provider.stage}
          description: a scheduler
          rate: rate(10 minutes)
          enabled: false
    vpc: ${self:custom.${self:provider.stage}.vpc}
    environment:
      DB_HOST: ${self:custom.${self:provider.stage}.env.DB_HOST}
      DB_DATABASE: ${self:custom.${self:provider.stage}.env.DB_DATABASE}
      DB_USER: ${self:custom.${self:provider.stage}.env.DB_USER}
      DB_PASSWORD: ${self:custom.${self:provider.stage}.env.DB_PASSWORD}
      TZ: ${self:custom.${self:provider.stage}.env.TZ}
      MEDIA_TTL: ${self:custom.${self:provider.stage}.env.MEDIA_TTL}
      LAMBDA_TEST_SERVER_TIME_ARN: '${self:service}-${opt:stage, self:provider.stage}-server-info'

  login:
    handler: login/index.handler
    description: 'simple demo for login'
    timeout: 10
    package:
      include:
        - login/**
    layers:
      - {Ref: BinaryLambdaLayer}
    events:
      - http:
          path: ${self:custom.api.rootPath}/users/login
          method: post
          cors: true
    vpc: ${self:custom.${self:provider.stage}.vpc}
    environment:
      DB_HOST: ${self:custom.${self:provider.stage}.env.DB_HOST}
      DB_DATABASE: ${self:custom.${self:provider.stage}.env.DB_DATABASE}
      DB_USER: ${self:custom.${self:provider.stage}.env.DB_USER}
      DB_PASSWORD: ${self:custom.${self:provider.stage}.env.DB_PASSWORD}

  authorizer:
    handler: authorizer/index.handler
    description: 'simple demo for authorizer'
    timeout: 10
    package:
      include:
        - authorizer/**
    vpc: ${self:custom.${self:provider.stage}.vpc}

  user-get:
    handler: api/users/read/index.handler
    description: 'simple demo for get user detail'
    timeout: 10
    package:
      include:
        - api/users/read/**
    events:
      - http:
          path: ${self:custom.api.rootPath}/users/{userId}
          method: get
          authorizer: authorizer
          cors: true
    vpc: ${self:custom.${self:provider.stage}.vpc}
    environment:
      DB_HOST: ${self:custom.${self:provider.stage}.env.DB_HOST}
      DB_DATABASE: ${self:custom.${self:provider.stage}.env.DB_DATABASE}
      DB_USER: ${self:custom.${self:provider.stage}.env.DB_USER}
      DB_PASSWORD: ${self:custom.${self:provider.stage}.env.DB_PASSWORD}

  user-list:
    handler: api/users/list/index.handler
    description: 'list users'
    timeout: 10
    package:
      include:
        - api/users/list/**
    events:
      - http:
          path: ${self:custom.api.rootPath}/users
          method: get
          authorizer: authorizer
          cors: true
    vpc: ${self:custom.${self:provider.stage}.vpc}
    environment:
      DB_HOST: ${self:custom.${self:provider.stage}.env.DB_HOST}
      DB_DATABASE: ${self:custom.${self:provider.stage}.env.DB_DATABASE}
      DB_USER: ${self:custom.${self:provider.stage}.env.DB_USER}
      DB_PASSWORD: ${self:custom.${self:provider.stage}.env.DB_PASSWORD}

  user-create:
    handler: api/users/create/index.handler
    description: 'create users'
    timeout: 30
    package:
      include:
        - api/users/create/**
    events:
      - http:
          path: ${self:custom.api.rootPath}/users
          method: post
          cors: true
    vpc: ${self:custom.${self:provider.stage}.vpc}
    environment:
      DB_HOST: ${self:custom.${self:provider.stage}.env.DB_HOST}
      DB_DATABASE: ${self:custom.${self:provider.stage}.env.DB_DATABASE}
      DB_USER: ${self:custom.${self:provider.stage}.env.DB_USER}
      DB_PASSWORD: ${self:custom.${self:provider.stage}.env.DB_PASSWORD}

  user-update:
    handler: api/users/update/index.handler
    description: 'update user'
    timeout: 30
    package:
      include:
        - api/users/update/**
    layers:
      - {Ref: BinaryLambdaLayer}
    events:
      - http:
          path: ${self:custom.api.rootPath}/users/{userId}
          method: patch
          authorizer: authorizer
          cors: true
    vpc: ${self:custom.${self:provider.stage}.vpc}
    environment:
      DB_HOST: ${self:custom.${self:provider.stage}.env.DB_HOST}
      DB_DATABASE: ${self:custom.${self:provider.stage}.env.DB_DATABASE}
      DB_USER: ${self:custom.${self:provider.stage}.env.DB_USER}
      DB_PASSWORD: ${self:custom.${self:provider.stage}.env.DB_PASSWORD}

  user-delete:
    handler: api/users/delete/index.handler
    description: 'delete user'
    timeout: 30
    package:
      include:
        - api/users/delete/**
    events:
      - http:
          path: ${self:custom.api.rootPath}/users/{userId}
          method: delete
          authorizer: authorizer
          cors: true
    vpc: ${self:custom.${self:provider.stage}.vpc}
    environment:
      DB_HOST: ${self:custom.${self:provider.stage}.env.DB_HOST}
      DB_DATABASE: ${self:custom.${self:provider.stage}.env.DB_DATABASE}
      DB_USER: ${self:custom.${self:provider.stage}.env.DB_USER}
      DB_PASSWORD: ${self:custom.${self:provider.stage}.env.DB_PASSWORD}

resources:
  Resources:
    SPCustomRole:
      Type: AWS::IAM::Role
      Properties:
        Path: '/'
        RoleName: ${self:service}-${opt:stage, self:provider.stage}-custom-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: 'vpc-policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - ${file(./assets/policy-statements/mandatory.yml)}
          - PolicyName: '${self:service}-${opt:stage, self:provider.stage}-custom-policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Sid: 'PolicyS3'
                Effect: Allow
                Action:
                - s3:PutObject
                - s3:PutObjectRetention
                - s3:PutObjectVersionAcl
                - s3:PutObjectLegalHold
                - s3:PutObjectAcl
                Resource: arn:aws:s3:::files.rnd/*
          - PolicyName:  ${self:service}-${opt:stage, self:provider.stage}-custom-policy-2
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Sid: 'PolicyLambda1'
                Effect: Allow
                Action:
                - 'lambda:InvokeFunction'
                Resource:
                - Fn::Join:
                  - ':'
                  - - arn:aws:lambda
                    - Ref: AWS::Region
                    - Ref: AWS::AccountId
                    - function:${self:service}-${opt:stage, self:provider.stage}-*
    SPFaceProcessorRole:
      Type: AWS::IAM::Role
      Properties:
        Path: '/'
        RoleName: ${self:service}-${opt:stage, self:provider.stage}-face-processor-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: 'vpc-policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - ${file(./assets/policy-statements/mandatory.yml)}
          - PolicyName: '${self:service}-${opt:stage, self:provider.stage}-s3-policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Sid: 'PolicyS3'
                Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                  - "s3:GetBucketLocation"
                  - "s3:GetObjectVersion"
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:GetLifecycleConfiguration"
                  - "s3:PutLifecycleConfiguration"
                  - "s3:DeleteObject"
                Resource:
                  - arn:aws:s3:::${self:custom.${self:provider.stage}.env.INPUT_IMAGE_BUCKET}/*
                  - arn:aws:s3:::${self:custom.${self:provider.stage}.env.OUTPUT_IMAGE_BUCKET}/*
          - PolicyName: '${self:service}-${opt:stage, self:provider.stage}-rekognition-policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Sid: 'PolicyRekognition'
                Effect: Allow
                Action:
                - rekognition:DetectFaces
                - rekognition:DetectLabels
                - rekognition:DetectModerationLabels
                - rekognition:DetectText
                Resource: '*'

    SPApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ServerlessPracticeGateway
        EndpointConfiguration:
          Types:
            - EDGE
    SPApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: DefaultAuthorizer
        RestApiId:
          Ref: SPApiGatewayRestApi
        AuthorizerCredentials: !GetAtt
          - SPCustomRole
          - Arn
        AuthorizerResultTtlInSeconds: '300'
        # arn:aws:lambda:ap-southeast-1:615663043961:function:serverless-practice-prod-authorizer
        AuthorizerUri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - arn:aws:lambda:${self:provider.region}:615663043961:function:${self:service}-${opt:stage, self:provider.stage}-authorizer
            - /invocations
        Type: 'TOKEN'
        IdentitySource: method.request.header.Authorization


    # S3 resource
    SPFilesRndPublishBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}.files.rnd.publish
        AccessControl: PublicRead
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:*
              Topic: !Ref SNSTopic

    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-when-s3-create-object

    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        Topics:
          - !Ref SNSTopic
        PolicyDocument:
          Id: SNSTopicPolicy
          Version: '2012-10-17'
          Statement:
            -
              Sid: S3TriggerAccess
              Effect: Allow
              Principal:
                AWS:
                  - '*'
              Action:
                - sns:Publish
              Resource:
                - !Ref SNSTopic
              Condition:
                ArnLike:
                  aws:SourceArn: !Sub "arn:aws:s3:::${self:service}.files.rnd.publish"

    SPFilesRndPublishBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: SPFilesRndPublishBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - "s3:GetObject"
              Resource:
                Fn::Join: [
                  "", [
                    "arn:aws:s3:::",
                    {
                      "Ref": "SPFilesRndPublishBucket"
                    },
                    "/*"
                  ]
                ]

layers:
  libs:
    # path: 'libs'
    name: ${self:service}-${self:provider.stage}-sharp
    compatibleRuntimes:
      - nodejs8.10
    package:
      artifact: libs/sharp.zip
  binary:
    name: ${self:service}-${self:provider.stage}-shared-binary
    compatibleRuntimes:
      - nodejs8.10
    package:
      artifact: libs/shared-binary.zip
